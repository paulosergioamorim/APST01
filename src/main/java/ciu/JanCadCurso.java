package ciu;

import cci.ControladorPrincipal;
import cdp.Curso;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.Locale;

public class JanCadCurso extends JFrame {
	private JPanel     mainPanel;
	private JTextField nomeTextField;
	private JTextField chTextField;
	private JButton    enviarButton;

	private ControladorPrincipal controlador;

	public JanCadCurso(ControladorPrincipal controlador) {
		super("Cadastro Curso");
		super.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
		super.setContentPane(mainPanel);
		super.setSize(400, 400);
		super.setResizable(false);

		this.controlador = controlador;

		enviarButton.addActionListener(enviarButtonListener);
	}

	private final ActionListener enviarButtonListener = e -> {
		try {
			var nome = nomeTextField.getText();
			var ch   = Integer.parseInt(chTextField.getText());
			int resposta = controlador.cadastrarCurso(nome, ch);
			if(resposta != 1) throw new Exception("Ocorreu um erro ao cadastrar o curso");

			controlador.exibirJanPrincipal();
			this.dispose();
		} catch (NumberFormatException ignored) {
			JOptionPane.showMessageDialog(this, "O campo Carga Horária só pode receber inteiros!");
		} catch (Exception exception) {
			JOptionPane.showMessageDialog(this, exception.getMessage());
		} finally {
			nomeTextField.setText(null);
			chTextField.setText(null);
		}
	};

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(9, 1, new Insets(0, 0, 0, 0), -1, -1));
		mainPanel.setBackground(new Color(-14803426));
		final JLabel label1     = new JLabel();
		Font         label1Font = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, 18, label1.getFont());
		if (label1Font != null) label1.setFont(label1Font);
		label1.setForeground(new Color(-3289651));
		label1.setText("Cadastro de Cursos");
		mainPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		nomeTextField = new JTextField();
		nomeTextField.setBackground(new Color(-6579301));
		nomeTextField.setColumns(0);
		mainPanel.add(nomeTextField, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		chTextField = new JTextField();
		chTextField.setBackground(new Color(-6579301));
		chTextField.setMargin(new Insets(2, 6, 2, 6));
		mainPanel.add(chTextField, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final Spacer spacer1 = new Spacer();
		mainPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setForeground(new Color(-3289651));
		label2.setText("Nome do Curso");
		mainPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setForeground(new Color(-3289651));
		label3.setText("Carga Horária do Curso");
		mainPanel.add(label3, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		mainPanel.add(spacer2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final Spacer spacer3 = new Spacer();
		mainPanel.add(spacer3, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		enviarButton = new JButton();
		enviarButton.setBackground(new Color(-10855846));
		enviarButton.setBorderPainted(false);
		enviarButton.setFocusPainted(false);
		enviarButton.setForeground(new Color(-3289651));
		enviarButton.setText("Enviar");
		mainPanel.add(enviarButton, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/** @noinspection ALL */
	private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
		if (currentFont == null) return null;
		String resultName;
		if (fontName == null) {resultName = currentFont.getName();} else {
			Font testFont = new Font(fontName, Font.PLAIN, 10);
			if (testFont.canDisplay('a') && testFont.canDisplay('1')) {resultName = fontName;} else {
				resultName = currentFont.getName();
			}
		}
		Font    font             = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
		boolean isMac            = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
		Font    fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
		return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
	}

	/** @noinspection ALL */
	public JComponent $$$getRootComponent$$$() {return mainPanel;}

}
