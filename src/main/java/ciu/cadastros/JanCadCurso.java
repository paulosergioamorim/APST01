package ciu.cadastros;

import cci.ControladorPrincipal;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

import static cdp.Formatters.*;
import static javax.swing.JOptionPane.ERROR_MESSAGE;

public class JanCadCurso extends JFrame {
    private final ControladorPrincipal controlador;

    private JPanel Panel;
    private JTextField Nome;
    private JFormattedTextField Ch;
    private JButton Salvar;

    public JanCadCurso(ControladorPrincipal controlador) {
        super("Cadastro de Curso");
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setContentPane(Panel);
        this.setResizable(false);
        this.setSize(300, 200);
        this.setLocationRelativeTo(null);

        this.controlador = controlador;

        Ch.setFormatterFactory(getFormatterFactory(int4Mask));

        Salvar.addActionListener(e -> {
            try {
                String nome = Nome.getText();
                int ch = Integer.parseInt(Ch.getText());
                controlador.cadastrarCurso(nome, ch);
            } catch (NumberFormatException ignored) {
                JOptionPane.showMessageDialog(this, "O campo Carga Horária só pode receber inteiros!", "Erro", ERROR_MESSAGE);
            } catch (Exception ignored) {
                JOptionPane.showMessageDialog(this, "Ocorreu um erro inesperado!", "Erro", ERROR_MESSAGE);
            }
        });
    }

    @Override
    public void dispose() {
        controlador.exibirJanPrincipal();
        super.dispose();
    }

    public JTextField getNome() { return Nome; }

    public JTextField getCh() { return Ch; }

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Panel = new JPanel();
        Panel.setLayout(new GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, -1));
        Panel.setBackground(new Color(-13487566));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-3289651));
        label1.setText("Carga Horária");
        Panel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setForeground(new Color(-3289651));
        label2.setText("Nome");
        Panel.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Nome = new JTextField();
        Panel.add(Nome, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Salvar = new JButton();
        Salvar.setBackground(new Color(-10855846));
        Salvar.setBorderPainted(false);
        Salvar.setFocusPainted(false);
        Salvar.setForeground(new Color(-3289651));
        Salvar.setText("Salvar");
        Panel.add(Salvar, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Ch = new JFormattedTextField();
        Ch.setMargin(new Insets(2, 6, 2, 6));
        Panel.add(Ch, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() { return Panel; }

}
